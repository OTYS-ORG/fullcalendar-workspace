
.fcnew {
  display: flex;
  flex-direction: column;

  &,
  & *,
  & *:before,
  & *:after {
    box-sizing: border-box;
  }
}

.fcnew-direction-ltr {
  direction: ltr;
  text-align: left; // needed?
}

.fcnew-direction-rtl {
  direction: rtl;
  text-align: right; // needed?
}

.fcnew-bordered {
  border: 1px solid var(--fcnew-border-color);
}

.fcnew-view-harness {
  position: relative; // for aspectratio AND for being origin for premium-message at bottom-left corner
}

.fcnew-view-harness-fixedheight {
  display: flex;
  flex-direction: column;
}

.fcnew-view-harness-fixedheight > .fcnew-view {
  // liquid
  flex-basis: 0;
  flex-grow: 1;
  min-height: 0;
}

.fcnew-view-harness-aspectratio > .fcnew-view {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

// Flexbox Utils
// -------------------------------------------------------------------------------------------------

.fcnew-flex-row {
  display: flex;
  flex-direction: row;
}

.fcnew-flex-column {
  display: flex;
  flex-direction: column;
}

.fcnew-grow {
  flex-grow: 1;
}

/*
Only important if there are siblings that are expanding too.
Rarely used. Just inline this?
*/
.fcnew-basis0 {
  flex-basis: 0;
}

.fcnew-liquid {
  flex-grow: 1;
  flex-basis: 0;
  min-width: 0;
  min-height: 0;
}

// Table Utils
// -------------------------------------------------------------------------------------------------

/*
NOTE: fcnew-rowgroup is like an fcnew-row, but DOES NOT FORCE CHILDREN TO BE CELLS
*/

.fcnew-row {
  display: flex;
  flex-direction: row;
}

.fcnew-rowgroup {
  display: flex;
  flex-direction: column;
}

/*
TODO: because of cell first-child issue, spreadsheet columns don't align
  need to devise similar solution where parent doesn't have a border, and first-child border is preserved
    - for spreadsheet cols
    - for virtualization scrolling of resources (first row should have top border)
    - for timegrid's abs-positioned cols needing left-inset from axis

TODO: rtl
TODO: make celldivider className? use it for Resizable twocol?
TODO: try making all rows/cells content-box! easier for width assigning
  HOWEVER, when explicitly setting tops/heights for resource rows, will overlap
  HOWEVER, when manually calculating how to distribute datagrid width to columns,
    resulting pixel array our cell outer widths (because they must add up to the total)
TODO: move away from 'spreadsheet' and use 'datagrid' instead
*/

.fcnew-row,
.fcnew-rowgroup,
.fcnew-rowdivider {
  border-style: solid;
  border-color: var(--fcnew-border-color);
  border-width: 1px 0 0; // top
}

.fcnew-row:first-child,
.fcnew-rowgroup:first-child,
.fcnew-rowdivider:first-child {
  border-top-width: 0;
}

.fcnew-cell {
  border-style: solid;
  border-color: var(--fcnew-border-color);
  border-width: 0 0 0 1px; // left
}

.fcnew-cell:first-child:not(.fcnew-not-first) {
  border-left-width: 0;
}

/*
Lone cell in a row should always fill row. Makes axis widths much easier
*/
.fcnew-cell:only-child {
  flex-grow: 1;
  flex-basis: 0;
  min-width: 0;
}

.fcnew-rowdivider {
  padding-bottom: 2px; // can use just height if we move towards content-box!
  background: var(--fcnew-neutral-bg-color);
}

.fcnew-rowdivider,
.fcnew-sticky-header {
  border-bottom-width: 1px; // takeover the bottom border
}

.fcnew-sticky-header + .fcnew-row, // TODO: move to fcnew-rowgroup-sticky?
.fcnew-sticky-header + .fcnew-rowgroup,
.fcnew-rowdivider + .fcnew-row,
.fcnew-rowdivider + .fcnew-rowgroup { // TODO: combine this with above
  border-top-width: 0;
}

// Misc Utils
// -------------------------------------------------------------------------------------------------

.fcnew-rel {
  position: relative;
}

.fcnew-absfill { // rename?
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.fcnew-absfill-x { // rename?
  position: absolute;
  left: 0;
  right: 0;
}

.fcnew-v-sticky {
  position: sticky;
  top: 0;
  bottom: 0;
}
.fcnew-sticky-header {
  position: sticky;
  top: 0;
  background: var(--fcnew-page-bg-color);
  z-index: 999; // TODO: what was it before?
}
.fcnew-sticky-footer {
  position: sticky;
  bottom: 0;
  z-index: 999; // TODO: what was it before?
}

.fcnew-h-sticky {
  position: sticky;
  left: 0;
  right: 0;
}

/*
Only needed when padding/border must be separate from width/height
*/
.fcnew-content-box {
  box-sizing: content-box;
}
